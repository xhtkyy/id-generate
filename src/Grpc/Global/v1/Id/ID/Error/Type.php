<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: global/v1/id.proto

namespace Xhtkyy\IdGenerator\Grpc\Global\v1\Id\ID\Error;

use UnexpectedValueException;

/**
 * Protobuf type <code>global.v1.ID.Error.Type</code>
 */
class Type
{
    /**
     * Generated from protobuf enum <code>SECRET_INVALID = 0 [(.errors.code) = 401];</code>
     */
    const SECRET_INVALID = 0;
    /**
     * Generated from protobuf enum <code>NAMESPACE_INVALID = 1 [(.errors.code) = 400];</code>
     */
    const NAMESPACE_INVALID = 1;
    /**
     * Generated from protobuf enum <code>DOMAIN_INVALID = 2 [(.errors.code) = 400];</code>
     */
    const DOMAIN_INVALID = 2;
    /**
     * Generated from protobuf enum <code>FORMAT_INVALID = 3 [(.errors.code) = 400];</code>
     */
    const FORMAT_INVALID = 3;
    /**
     * Generated from protobuf enum <code>TYPE_INVALID = 4 [(.errors.code) = 400];</code>
     */
    const TYPE_INVALID = 4;
    /**
     * Generated from protobuf enum <code>COUNT_TOO_LARGE = 5 [(.errors.code) = 400];</code>
     */
    const COUNT_TOO_LARGE = 5;

    private static $valueToName = [
        self::SECRET_INVALID => 'SECRET_INVALID',
        self::NAMESPACE_INVALID => 'NAMESPACE_INVALID',
        self::DOMAIN_INVALID => 'DOMAIN_INVALID',
        self::FORMAT_INVALID => 'FORMAT_INVALID',
        self::TYPE_INVALID => 'TYPE_INVALID',
        self::COUNT_TOO_LARGE => 'COUNT_TOO_LARGE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Type::class, \Xhtkyy\IdGenerator\Grpc\Global\v1\Id\ID_Error_Type::class);

